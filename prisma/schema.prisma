// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id            Int       @id @default(autoincrement())
  paymentMethod String
  itemsPrice    Float
  shippingPrice Float
  taxPrice      Float
  totalPrice    Float
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  isDelivered   Boolean   @default(false)
  deliveredAt   DateTime?

  products   Product[]
  orderItems OrderItem[]

  shippingId      Int             @unique
  shippingAddress ShippingAddress @relation(fields: [shippingId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id           Int    @id @default(autoincrement())
  name         String
  slug         String
  category     String
  image        String
  price        Float
  brand        String
  rating       Float
  numReviews   Int
  countInStock Int
  description  String
  quantity     Int

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id         Int    @id @default(autoincrement())
  fullName   String
  address    String
  city       String
  postalCode String
  country    String

  order Order?
}

model Product {
  id           Int    @id @default(autoincrement())
  name         String
  slug         String
  category     String
  image        String
  price        Float
  brand        String
  rating       Float
  numReviews   Int
  countInStock Int
  description  String

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?  @unique
  emailVerified String?
  image         String?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role     @default(USER)

  accounts Account[]
  order    Order[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  //combination of this should be unique
  @@unique([provider, providerAccountId])
}

enum Role {
  ADMIN
  USER
}
